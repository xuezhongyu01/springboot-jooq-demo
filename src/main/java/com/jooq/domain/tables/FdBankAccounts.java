/*
 * This file is generated by jOOQ.
*/
package com.jooq.domain.tables;


import com.jooq.domain.Indexes;
import com.jooq.domain.Keys;
import com.jooq.domain.Xbkj;
import com.jooq.domain.tables.records.FdBankAccountsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 网银数据表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FdBankAccounts extends TableImpl<FdBankAccountsRecord> {

    private static final long serialVersionUID = 1064175667;

    /**
     * The reference instance of <code>xbkj.fd_bank_accounts</code>
     */
    public static final FdBankAccounts FD_BANK_ACCOUNTS = new FdBankAccounts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FdBankAccountsRecord> getRecordType() {
        return FdBankAccountsRecord.class;
    }

    /**
     * The column <code>xbkj.fd_bank_accounts.id</code>. 主键
     */
    public final TableField<FdBankAccountsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>xbkj.fd_bank_accounts.member_id</code>. 用户id
     */
    public final TableField<FdBankAccountsRecord, Long> MEMBER_ID = createField("member_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "用户id");

    /**
     * The column <code>xbkj.fd_bank_accounts.type</code>. 账户类型账户类型：储蓄卡，信用卡，未知的卡
     */
    public final TableField<FdBankAccountsRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(32), this, "账户类型账户类型：储蓄卡，信用卡，未知的卡");

    /**
     * The column <code>xbkj.fd_bank_accounts.card</code>. 卡号：可空，是否脱敏取决于官网
     */
    public final TableField<FdBankAccountsRecord, String> CARD = createField("card", org.jooq.impl.SQLDataType.VARCHAR(64), this, "卡号：可空，是否脱敏取决于官网");

    /**
     * The column <code>xbkj.fd_bank_accounts.main_vice_flag</code>. 主副卡标志，0（主卡），1（副卡）
     */
    public final TableField<FdBankAccountsRecord, String> MAIN_VICE_FLAG = createField("main_vice_flag", org.jooq.impl.SQLDataType.VARCHAR(32), this, "主副卡标志，0（主卡），1（副卡）");

    /**
     * The column <code>xbkj.fd_bank_accounts.holder</code>. 持卡人姓名
     */
    public final TableField<FdBankAccountsRecord, String> HOLDER = createField("holder", org.jooq.impl.SQLDataType.VARCHAR(32), this, "持卡人姓名");

    /**
     * The column <code>xbkj.fd_bank_accounts.idcard</code>. 证件号码
     */
    public final TableField<FdBankAccountsRecord, String> IDCARD = createField("idcard", org.jooq.impl.SQLDataType.VARCHAR(32), this, "证件号码");

    /**
     * The column <code>xbkj.fd_bank_accounts.status</code>. 状态(中文) 字符串输出，根据原始爬虫结果进行输出
     */
    public final TableField<FdBankAccountsRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(32), this, "状态(中文) 字符串输出，根据原始爬虫结果进行输出");

    /**
     * The column <code>xbkj.fd_bank_accounts.open_date</code>. 开卡时间
     */
    public final TableField<FdBankAccountsRecord, String> OPEN_DATE = createField("open_date", org.jooq.impl.SQLDataType.VARCHAR(32), this, "开卡时间");

    /**
     * The column <code>xbkj.fd_bank_accounts.balance</code>. 当前余额(储蓄卡特有，单位：分)
     */
    public final TableField<FdBankAccountsRecord, String> BALANCE = createField("balance", org.jooq.impl.SQLDataType.VARCHAR(32), this, "当前余额(储蓄卡特有，单位：分)");

    /**
     * The column <code>xbkj.fd_bank_accounts.bill_day</code>. 账单日(信用卡特有)
     */
    public final TableField<FdBankAccountsRecord, String> BILL_DAY = createField("bill_day", org.jooq.impl.SQLDataType.VARCHAR(32), this, "账单日(信用卡特有)");

    /**
     * The column <code>xbkj.fd_bank_accounts.repay_day</code>. 还款日(信用卡特有)
     */
    public final TableField<FdBankAccountsRecord, String> REPAY_DAY = createField("repay_day", org.jooq.impl.SQLDataType.VARCHAR(32), this, "还款日(信用卡特有)");

    /**
     * The column <code>xbkj.fd_bank_accounts.points</code>. 积分
     */
    public final TableField<FdBankAccountsRecord, String> POINTS = createField("points", org.jooq.impl.SQLDataType.VARCHAR(32), this, "积分");

    /**
     * The column <code>xbkj.fd_bank_accounts.card_name</code>. 卡产品名称
     */
    public final TableField<FdBankAccountsRecord, String> CARD_NAME = createField("card_name", org.jooq.impl.SQLDataType.VARCHAR(32), this, "卡产品名称");

    /**
     * The column <code>xbkj.fd_bank_accounts.current_arrears</code>. 当前剩余欠款(单位：分)
     */
    public final TableField<FdBankAccountsRecord, String> CURRENT_ARREARS = createField("current_arrears", org.jooq.impl.SQLDataType.VARCHAR(32), this, "当前剩余欠款(单位：分)");

    /**
     * The column <code>xbkj.fd_bank_accounts.current_payed_amount</code>. 本期已还
     */
    public final TableField<FdBankAccountsRecord, String> CURRENT_PAYED_AMOUNT = createField("current_payed_amount", org.jooq.impl.SQLDataType.VARCHAR(32), this, "本期已还");

    /**
     * The column <code>xbkj.fd_bank_accounts.current_credited_amount</code>. 未出账单已入账金额
     */
    public final TableField<FdBankAccountsRecord, String> CURRENT_CREDITED_AMOUNT = createField("current_credited_amount", org.jooq.impl.SQLDataType.VARCHAR(32), this, "未出账单已入账金额");

    /**
     * The column <code>xbkj.fd_bank_accounts.create_at</code>. 创建时间
     */
    public final TableField<FdBankAccountsRecord, Timestamp> CREATE_AT = createField("create_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>xbkj.fd_bank_accounts.update_at</code>. 更新时间
     */
    public final TableField<FdBankAccountsRecord, Timestamp> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * The column <code>xbkj.fd_bank_accounts.del_flag</code>. 删除标志
     */
    public final TableField<FdBankAccountsRecord, Boolean> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "删除标志");

    /**
     * The column <code>xbkj.fd_bank_accounts.version</code>.
     */
    public final TableField<FdBankAccountsRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>xbkj.fd_bank_accounts</code> table reference
     */
    public FdBankAccounts() {
        this(DSL.name("fd_bank_accounts"), null);
    }

    /**
     * Create an aliased <code>xbkj.fd_bank_accounts</code> table reference
     */
    public FdBankAccounts(String alias) {
        this(DSL.name(alias), FD_BANK_ACCOUNTS);
    }

    /**
     * Create an aliased <code>xbkj.fd_bank_accounts</code> table reference
     */
    public FdBankAccounts(Name alias) {
        this(alias, FD_BANK_ACCOUNTS);
    }

    private FdBankAccounts(Name alias, Table<FdBankAccountsRecord> aliased) {
        this(alias, aliased, null);
    }

    private FdBankAccounts(Name alias, Table<FdBankAccountsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "网银数据表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Xbkj.XBKJ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FD_BANK_ACCOUNTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FdBankAccountsRecord, Long> getIdentity() {
        return Keys.IDENTITY_FD_BANK_ACCOUNTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FdBankAccountsRecord> getPrimaryKey() {
        return Keys.KEY_FD_BANK_ACCOUNTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FdBankAccountsRecord>> getKeys() {
        return Arrays.<UniqueKey<FdBankAccountsRecord>>asList(Keys.KEY_FD_BANK_ACCOUNTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FdBankAccounts as(String alias) {
        return new FdBankAccounts(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FdBankAccounts as(Name alias) {
        return new FdBankAccounts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FdBankAccounts rename(String name) {
        return new FdBankAccounts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FdBankAccounts rename(Name name) {
        return new FdBankAccounts(name, null);
    }
}
