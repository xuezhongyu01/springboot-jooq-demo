/*
 * This file is generated by jOOQ.
*/
package com.jooq.domain.tables;


import com.jooq.domain.Indexes;
import com.jooq.domain.Keys;
import com.jooq.domain.Xbkj;
import com.jooq.domain.tables.records.OauthCodeRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 授权码模式
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OauthCode extends TableImpl<OauthCodeRecord> {

    private static final long serialVersionUID = -1980388380;

    /**
     * The reference instance of <code>xbkj.oauth_code</code>
     */
    public static final OauthCode OAUTH_CODE = new OauthCode();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OauthCodeRecord> getRecordType() {
        return OauthCodeRecord.class;
    }

    /**
     * The column <code>xbkj.oauth_code.id</code>. 编号
     */
    public final TableField<OauthCodeRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "编号");

    /**
     * The column <code>xbkj.oauth_code.code</code>.
     */
    public final TableField<OauthCodeRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>xbkj.oauth_code.memeber_id</code>.
     */
    public final TableField<OauthCodeRecord, Long> MEMEBER_ID = createField("memeber_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>xbkj.oauth_code.oauth_client_id</code>.
     */
    public final TableField<OauthCodeRecord, Long> OAUTH_CLIENT_ID = createField("oauth_client_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>xbkj.oauth_code.create_at</code>. 创建时间
     */
    public final TableField<OauthCodeRecord, Timestamp> CREATE_AT = createField("create_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>xbkj.oauth_code.update_at</code>. 更新时间
     */
    public final TableField<OauthCodeRecord, Timestamp> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * Create a <code>xbkj.oauth_code</code> table reference
     */
    public OauthCode() {
        this(DSL.name("oauth_code"), null);
    }

    /**
     * Create an aliased <code>xbkj.oauth_code</code> table reference
     */
    public OauthCode(String alias) {
        this(DSL.name(alias), OAUTH_CODE);
    }

    /**
     * Create an aliased <code>xbkj.oauth_code</code> table reference
     */
    public OauthCode(Name alias) {
        this(alias, OAUTH_CODE);
    }

    private OauthCode(Name alias, Table<OauthCodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private OauthCode(Name alias, Table<OauthCodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "授权码模式");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Xbkj.XBKJ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OAUTH_CODE_CODE, Indexes.OAUTH_CODE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OauthCodeRecord, Long> getIdentity() {
        return Keys.IDENTITY_OAUTH_CODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OauthCodeRecord> getPrimaryKey() {
        return Keys.KEY_OAUTH_CODE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OauthCodeRecord>> getKeys() {
        return Arrays.<UniqueKey<OauthCodeRecord>>asList(Keys.KEY_OAUTH_CODE_PRIMARY, Keys.KEY_OAUTH_CODE_CODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthCode as(String alias) {
        return new OauthCode(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthCode as(Name alias) {
        return new OauthCode(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OauthCode rename(String name) {
        return new OauthCode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OauthCode rename(Name name) {
        return new OauthCode(name, null);
    }
}
