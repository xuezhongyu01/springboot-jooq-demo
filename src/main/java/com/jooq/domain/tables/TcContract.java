/*
 * This file is generated by jOOQ.
*/
package com.jooq.domain.tables;


import com.jooq.domain.Indexes;
import com.jooq.domain.Keys;
import com.jooq.domain.Xbkj;
import com.jooq.domain.tables.records.TcContractRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 合同表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TcContract extends TableImpl<TcContractRecord> {

    private static final long serialVersionUID = -202987988;

    /**
     * The reference instance of <code>xbkj.tc_contract</code>
     */
    public static final TcContract TC_CONTRACT = new TcContract();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TcContractRecord> getRecordType() {
        return TcContractRecord.class;
    }

    /**
     * The column <code>xbkj.tc_contract.id</code>.
     */
    public final TableField<TcContractRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>xbkj.tc_contract.order_id</code>. 订单ID
     */
    public final TableField<TcContractRecord, Long> ORDER_ID = createField("order_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "订单ID");

    /**
     * The column <code>xbkj.tc_contract.contract_name</code>. 合同文件名
     */
    public final TableField<TcContractRecord, String> CONTRACT_NAME = createField("contract_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "合同文件名");

    /**
     * The column <code>xbkj.tc_contract.create_at</code>. 创建时间
     */
    public final TableField<TcContractRecord, Timestamp> CREATE_AT = createField("create_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>xbkj.tc_contract.update_at</code>. 更新时间
     */
    public final TableField<TcContractRecord, Timestamp> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * The column <code>xbkj.tc_contract.del_flag</code>. 删除标志
     */
    public final TableField<TcContractRecord, Boolean> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "删除标志");

    /**
     * The column <code>xbkj.tc_contract.version</code>.
     */
    public final TableField<TcContractRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>xbkj.tc_contract</code> table reference
     */
    public TcContract() {
        this(DSL.name("tc_contract"), null);
    }

    /**
     * Create an aliased <code>xbkj.tc_contract</code> table reference
     */
    public TcContract(String alias) {
        this(DSL.name(alias), TC_CONTRACT);
    }

    /**
     * Create an aliased <code>xbkj.tc_contract</code> table reference
     */
    public TcContract(Name alias) {
        this(alias, TC_CONTRACT);
    }

    private TcContract(Name alias, Table<TcContractRecord> aliased) {
        this(alias, aliased, null);
    }

    private TcContract(Name alias, Table<TcContractRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "合同表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Xbkj.XBKJ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TC_CONTRACT_PRIMARY, Indexes.TC_CONTRACT_UNIQUE_TRANSACTION_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TcContractRecord, Long> getIdentity() {
        return Keys.IDENTITY_TC_CONTRACT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TcContractRecord> getPrimaryKey() {
        return Keys.KEY_TC_CONTRACT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TcContractRecord>> getKeys() {
        return Arrays.<UniqueKey<TcContractRecord>>asList(Keys.KEY_TC_CONTRACT_PRIMARY, Keys.KEY_TC_CONTRACT_UNIQUE_TRANSACTION_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TcContract as(String alias) {
        return new TcContract(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TcContract as(Name alias) {
        return new TcContract(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TcContract rename(String name) {
        return new TcContract(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TcContract rename(Name name) {
        return new TcContract(name, null);
    }
}
