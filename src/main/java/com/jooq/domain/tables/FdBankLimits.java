/*
 * This file is generated by jOOQ.
*/
package com.jooq.domain.tables;


import com.jooq.domain.Indexes;
import com.jooq.domain.Keys;
import com.jooq.domain.Xbkj;
import com.jooq.domain.tables.records.FdBankLimitsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 信用卡额度(数组)
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FdBankLimits extends TableImpl<FdBankLimitsRecord> {

    private static final long serialVersionUID = 431836408;

    /**
     * The reference instance of <code>xbkj.fd_bank_limits</code>
     */
    public static final FdBankLimits FD_BANK_LIMITS = new FdBankLimits();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FdBankLimitsRecord> getRecordType() {
        return FdBankLimitsRecord.class;
    }

    /**
     * The column <code>xbkj.fd_bank_limits.id</code>. 主键
     */
    public final TableField<FdBankLimitsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>xbkj.fd_bank_limits.account_id</code>. 账户ID(关联字段)
     */
    public final TableField<FdBankLimitsRecord, Long> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.BIGINT, this, "账户ID(关联字段)");

    /**
     * The column <code>xbkj.fd_bank_limits.currency</code>. 币种(中文，参见币种字典)
     */
    public final TableField<FdBankLimitsRecord, String> CURRENCY = createField("currency", org.jooq.impl.SQLDataType.VARCHAR(32), this, "币种(中文，参见币种字典)");

    /**
     * The column <code>xbkj.fd_bank_limits.consume_limit</code>. 消费额度(单位：分)
     */
    public final TableField<FdBankLimitsRecord, String> CONSUME_LIMIT = createField("consume_limit", org.jooq.impl.SQLDataType.VARCHAR(64), this, "消费额度(单位：分)");

    /**
     * The column <code>xbkj.fd_bank_limits.usable_consume_limit</code>. 可用消费额度(单位：分)
     */
    public final TableField<FdBankLimitsRecord, String> USABLE_CONSUME_LIMIT = createField("usable_consume_limit", org.jooq.impl.SQLDataType.VARCHAR(64), this, "可用消费额度(单位：分)");

    /**
     * The column <code>xbkj.fd_bank_limits.cash_limit</code>. 取现额度(单位：分)
     */
    public final TableField<FdBankLimitsRecord, String> CASH_LIMIT = createField("cash_limit", org.jooq.impl.SQLDataType.VARCHAR(32), this, "取现额度(单位：分)");

    /**
     * The column <code>xbkj.fd_bank_limits.usable_cash_limit</code>. 可用取现额度(单位：分)
     */
    public final TableField<FdBankLimitsRecord, String> USABLE_CASH_LIMIT = createField("usable_cash_limit", org.jooq.impl.SQLDataType.VARCHAR(32), this, "可用取现额度(单位：分)");

    /**
     * The column <code>xbkj.fd_bank_limits.cash_advance_limit</code>. 预借现金额度(单位：分）
     */
    public final TableField<FdBankLimitsRecord, String> CASH_ADVANCE_LIMIT = createField("cash_advance_limit", org.jooq.impl.SQLDataType.VARCHAR(32), this, "预借现金额度(单位：分）");

    /**
     * The column <code>xbkj.fd_bank_limits.create_at</code>. 创建时间
     */
    public final TableField<FdBankLimitsRecord, Timestamp> CREATE_AT = createField("create_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>xbkj.fd_bank_limits.update_at</code>. 更新时间
     */
    public final TableField<FdBankLimitsRecord, Timestamp> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * The column <code>xbkj.fd_bank_limits.del_flag</code>. 删除标志
     */
    public final TableField<FdBankLimitsRecord, Boolean> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "删除标志");

    /**
     * The column <code>xbkj.fd_bank_limits.version</code>.
     */
    public final TableField<FdBankLimitsRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>xbkj.fd_bank_limits</code> table reference
     */
    public FdBankLimits() {
        this(DSL.name("fd_bank_limits"), null);
    }

    /**
     * Create an aliased <code>xbkj.fd_bank_limits</code> table reference
     */
    public FdBankLimits(String alias) {
        this(DSL.name(alias), FD_BANK_LIMITS);
    }

    /**
     * Create an aliased <code>xbkj.fd_bank_limits</code> table reference
     */
    public FdBankLimits(Name alias) {
        this(alias, FD_BANK_LIMITS);
    }

    private FdBankLimits(Name alias, Table<FdBankLimitsRecord> aliased) {
        this(alias, aliased, null);
    }

    private FdBankLimits(Name alias, Table<FdBankLimitsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "信用卡额度(数组)");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Xbkj.XBKJ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FD_BANK_LIMITS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FdBankLimitsRecord, Long> getIdentity() {
        return Keys.IDENTITY_FD_BANK_LIMITS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FdBankLimitsRecord> getPrimaryKey() {
        return Keys.KEY_FD_BANK_LIMITS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FdBankLimitsRecord>> getKeys() {
        return Arrays.<UniqueKey<FdBankLimitsRecord>>asList(Keys.KEY_FD_BANK_LIMITS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FdBankLimits as(String alias) {
        return new FdBankLimits(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FdBankLimits as(Name alias) {
        return new FdBankLimits(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FdBankLimits rename(String name) {
        return new FdBankLimits(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FdBankLimits rename(Name name) {
        return new FdBankLimits(name, null);
    }
}
