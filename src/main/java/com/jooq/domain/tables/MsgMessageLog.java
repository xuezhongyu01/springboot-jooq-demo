/*
 * This file is generated by jOOQ.
*/
package com.jooq.domain.tables;


import com.jooq.domain.Indexes;
import com.jooq.domain.Keys;
import com.jooq.domain.Xbkj;
import com.jooq.domain.enums.MsgMessageLogStatus;
import com.jooq.domain.enums.MsgMessageLogType;
import com.jooq.domain.tables.records.MsgMessageLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 消息日志
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MsgMessageLog extends TableImpl<MsgMessageLogRecord> {

    private static final long serialVersionUID = 1448179034;

    /**
     * The reference instance of <code>xbkj.msg_message_log</code>
     */
    public static final MsgMessageLog MSG_MESSAGE_LOG = new MsgMessageLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MsgMessageLogRecord> getRecordType() {
        return MsgMessageLogRecord.class;
    }

    /**
     * The column <code>xbkj.msg_message_log.id</code>.
     */
    public final TableField<MsgMessageLogRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>xbkj.msg_message_log.member_id</code>. 用户编号
     */
    public final TableField<MsgMessageLogRecord, Long> MEMBER_ID = createField("member_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "用户编号");

    /**
     * The column <code>xbkj.msg_message_log.msg_message_template_id</code>. 消息模板内容编号
     */
    public final TableField<MsgMessageLogRecord, Long> MSG_MESSAGE_TEMPLATE_ID = createField("msg_message_template_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "消息模板内容编号");

    /**
     * The column <code>xbkj.msg_message_log.subject</code>. 标题
     */
    public final TableField<MsgMessageLogRecord, String> SUBJECT = createField("subject", org.jooq.impl.SQLDataType.VARCHAR(255), this, "标题");

    /**
     * The column <code>xbkj.msg_message_log.content</code>. 内容
     */
    public final TableField<MsgMessageLogRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.VARCHAR(5000), this, "内容");

    /**
     * The column <code>xbkj.msg_message_log.receive_date</code>. 接收时间
     */
    public final TableField<MsgMessageLogRecord, Timestamp> RECEIVE_DATE = createField("receive_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "接收时间");

    /**
     * The column <code>xbkj.msg_message_log.read_time</code>. 阅读时间
     */
    public final TableField<MsgMessageLogRecord, Timestamp> READ_TIME = createField("read_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "阅读时间");

    /**
     * The column <code>xbkj.msg_message_log.status</code>. 状态：未读，已读
     */
    public final TableField<MsgMessageLogRecord, MsgMessageLogStatus> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(7).nullable(false).defaultValue(org.jooq.impl.DSL.inline("un_read", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(com.jooq.domain.enums.MsgMessageLogStatus.class), this, "状态：未读，已读");

    /**
     * The column <code>xbkj.msg_message_log.type</code>. 类型 '普通','紧急'
     */
    public final TableField<MsgMessageLogRecord, MsgMessageLogType> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(7).defaultValue(org.jooq.impl.DSL.inline("normal", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(com.jooq.domain.enums.MsgMessageLogType.class), this, "类型 '普通','紧急'");

    /**
     * The column <code>xbkj.msg_message_log.href</code>. 消息链接
     */
    public final TableField<MsgMessageLogRecord, String> HREF = createField("href", org.jooq.impl.SQLDataType.VARCHAR(255), this, "消息链接");

    /**
     * The column <code>xbkj.msg_message_log.create_at</code>. 创建时间
     */
    public final TableField<MsgMessageLogRecord, Timestamp> CREATE_AT = createField("create_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>xbkj.msg_message_log.update_at</code>. 更新时间
     */
    public final TableField<MsgMessageLogRecord, Timestamp> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * The column <code>xbkj.msg_message_log.del_flag</code>. 删除标志
     */
    public final TableField<MsgMessageLogRecord, Boolean> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "删除标志");

    /**
     * The column <code>xbkj.msg_message_log.version</code>.
     */
    public final TableField<MsgMessageLogRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>xbkj.msg_message_log</code> table reference
     */
    public MsgMessageLog() {
        this(DSL.name("msg_message_log"), null);
    }

    /**
     * Create an aliased <code>xbkj.msg_message_log</code> table reference
     */
    public MsgMessageLog(String alias) {
        this(DSL.name(alias), MSG_MESSAGE_LOG);
    }

    /**
     * Create an aliased <code>xbkj.msg_message_log</code> table reference
     */
    public MsgMessageLog(Name alias) {
        this(alias, MSG_MESSAGE_LOG);
    }

    private MsgMessageLog(Name alias, Table<MsgMessageLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private MsgMessageLog(Name alias, Table<MsgMessageLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "消息日志");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Xbkj.XBKJ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MSG_MESSAGE_LOG_IX_MEMBER_ID, Indexes.MSG_MESSAGE_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MsgMessageLogRecord, Long> getIdentity() {
        return Keys.IDENTITY_MSG_MESSAGE_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MsgMessageLogRecord> getPrimaryKey() {
        return Keys.KEY_MSG_MESSAGE_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MsgMessageLogRecord>> getKeys() {
        return Arrays.<UniqueKey<MsgMessageLogRecord>>asList(Keys.KEY_MSG_MESSAGE_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MsgMessageLog as(String alias) {
        return new MsgMessageLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MsgMessageLog as(Name alias) {
        return new MsgMessageLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MsgMessageLog rename(String name) {
        return new MsgMessageLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MsgMessageLog rename(Name name) {
        return new MsgMessageLog(name, null);
    }
}
