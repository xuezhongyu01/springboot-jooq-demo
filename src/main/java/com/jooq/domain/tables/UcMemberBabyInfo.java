/*
 * This file is generated by jOOQ.
*/
package com.jooq.domain.tables;


import com.jooq.domain.Indexes;
import com.jooq.domain.Keys;
import com.jooq.domain.Xbkj;
import com.jooq.domain.tables.records.UcMemberBabyInfoRecord;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 宝宝信息表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UcMemberBabyInfo extends TableImpl<UcMemberBabyInfoRecord> {

    private static final long serialVersionUID = 958662504;

    /**
     * The reference instance of <code>xbkj.uc_member_baby_info</code>
     */
    public static final UcMemberBabyInfo UC_MEMBER_BABY_INFO = new UcMemberBabyInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UcMemberBabyInfoRecord> getRecordType() {
        return UcMemberBabyInfoRecord.class;
    }

    /**
     * The column <code>xbkj.uc_member_baby_info.id</code>.
     */
    public final TableField<UcMemberBabyInfoRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>xbkj.uc_member_baby_info.member_id</code>. 用户id
     */
    public final TableField<UcMemberBabyInfoRecord, Long> MEMBER_ID = createField("member_id", org.jooq.impl.SQLDataType.BIGINT, this, "用户id");

    /**
     * The column <code>xbkj.uc_member_baby_info.head_url</code>. 头像
     */
    public final TableField<UcMemberBabyInfoRecord, String> HEAD_URL = createField("head_url", org.jooq.impl.SQLDataType.VARCHAR(256), this, "头像");

    /**
     * The column <code>xbkj.uc_member_baby_info.nickname</code>. 昵称
     */
    public final TableField<UcMemberBabyInfoRecord, String> NICKNAME = createField("nickname", org.jooq.impl.SQLDataType.VARCHAR(128), this, "昵称");

    /**
     * The column <code>xbkj.uc_member_baby_info.birthday</code>. 出生日期
     */
    public final TableField<UcMemberBabyInfoRecord, Date> BIRTHDAY = createField("birthday", org.jooq.impl.SQLDataType.DATE, this, "出生日期");

    /**
     * The column <code>xbkj.uc_member_baby_info.gender</code>. 性别
     */
    public final TableField<UcMemberBabyInfoRecord, String> GENDER = createField("gender", org.jooq.impl.SQLDataType.VARCHAR(64), this, "性别");

    /**
     * The column <code>xbkj.uc_member_baby_info.interests</code>. 兴趣
     */
    public final TableField<UcMemberBabyInfoRecord, String> INTERESTS = createField("interests", org.jooq.impl.SQLDataType.VARCHAR(200), this, "兴趣");

    /**
     * The column <code>xbkj.uc_member_baby_info.create_at</code>. 创建时间
     */
    public final TableField<UcMemberBabyInfoRecord, Timestamp> CREATE_AT = createField("create_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>xbkj.uc_member_baby_info.update_at</code>. 更新时间
     */
    public final TableField<UcMemberBabyInfoRecord, Timestamp> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * The column <code>xbkj.uc_member_baby_info.del_flag</code>. 删除标志
     */
    public final TableField<UcMemberBabyInfoRecord, Boolean> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "删除标志");

    /**
     * The column <code>xbkj.uc_member_baby_info.version</code>.
     */
    public final TableField<UcMemberBabyInfoRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>xbkj.uc_member_baby_info</code> table reference
     */
    public UcMemberBabyInfo() {
        this(DSL.name("uc_member_baby_info"), null);
    }

    /**
     * Create an aliased <code>xbkj.uc_member_baby_info</code> table reference
     */
    public UcMemberBabyInfo(String alias) {
        this(DSL.name(alias), UC_MEMBER_BABY_INFO);
    }

    /**
     * Create an aliased <code>xbkj.uc_member_baby_info</code> table reference
     */
    public UcMemberBabyInfo(Name alias) {
        this(alias, UC_MEMBER_BABY_INFO);
    }

    private UcMemberBabyInfo(Name alias, Table<UcMemberBabyInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private UcMemberBabyInfo(Name alias, Table<UcMemberBabyInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "宝宝信息表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Xbkj.XBKJ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.UC_MEMBER_BABY_INFO_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UcMemberBabyInfoRecord, Long> getIdentity() {
        return Keys.IDENTITY_UC_MEMBER_BABY_INFO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UcMemberBabyInfoRecord> getPrimaryKey() {
        return Keys.KEY_UC_MEMBER_BABY_INFO_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UcMemberBabyInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<UcMemberBabyInfoRecord>>asList(Keys.KEY_UC_MEMBER_BABY_INFO_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UcMemberBabyInfo as(String alias) {
        return new UcMemberBabyInfo(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UcMemberBabyInfo as(Name alias) {
        return new UcMemberBabyInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UcMemberBabyInfo rename(String name) {
        return new UcMemberBabyInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UcMemberBabyInfo rename(Name name) {
        return new UcMemberBabyInfo(name, null);
    }
}
