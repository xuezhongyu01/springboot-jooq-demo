/*
 * This file is generated by jOOQ.
*/
package com.jooq.domain.tables;


import com.jooq.domain.Indexes;
import com.jooq.domain.Keys;
import com.jooq.domain.Xbkj;
import com.jooq.domain.tables.records.UcMemberDegreeRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 学历表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UcMemberDegree extends TableImpl<UcMemberDegreeRecord> {

    private static final long serialVersionUID = 1578128557;

    /**
     * The reference instance of <code>xbkj.uc_member_degree</code>
     */
    public static final UcMemberDegree UC_MEMBER_DEGREE = new UcMemberDegree();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UcMemberDegreeRecord> getRecordType() {
        return UcMemberDegreeRecord.class;
    }

    /**
     * The column <code>xbkj.uc_member_degree.id</code>. id
     */
    public final TableField<UcMemberDegreeRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "id");

    /**
     * The column <code>xbkj.uc_member_degree.member_id</code>. memberId
     */
    public final TableField<UcMemberDegreeRecord, Long> MEMBER_ID = createField("member_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "memberId");

    /**
     * The column <code>xbkj.uc_member_degree.degree</code>. 学历
     */
    public final TableField<UcMemberDegreeRecord, String> DEGREE = createField("degree", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "学历");

    /**
     * The column <code>xbkj.uc_member_degree.start_time</code>. 入学时间
     */
    public final TableField<UcMemberDegreeRecord, String> START_TIME = createField("start_time", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "入学时间");

    /**
     * The column <code>xbkj.uc_member_degree.graduate_time</code>. 毕业时间
     */
    public final TableField<UcMemberDegreeRecord, String> GRADUATE_TIME = createField("graduate_time", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "毕业时间");

    /**
     * The column <code>xbkj.uc_member_degree.iskey_subject</code>. 是否国家重点学科
     */
    public final TableField<UcMemberDegreeRecord, String> ISKEY_SUBJECT = createField("iskey_subject", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "是否国家重点学科");

    /**
     * The column <code>xbkj.uc_member_degree.level_no</code>. 学历层次
     */
    public final TableField<UcMemberDegreeRecord, String> LEVEL_NO = createField("level_no", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "学历层次");

    /**
     * The column <code>xbkj.uc_member_degree.study_result</code>. 毕业结论
     */
    public final TableField<UcMemberDegreeRecord, String> STUDY_RESULT = createField("study_result", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "毕业结论");

    /**
     * The column <code>xbkj.uc_member_degree.study_style</code>. 学习形式
     */
    public final TableField<UcMemberDegreeRecord, String> STUDY_STYLE = createField("study_style", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "学习形式");

    /**
     * The column <code>xbkj.uc_member_degree.study_type</code>. 学历类别
     */
    public final TableField<UcMemberDegreeRecord, String> STUDY_TYPE = createField("study_type", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "学历类别");

    /**
     * The column <code>xbkj.uc_member_degree.specialty</code>. 专业
     */
    public final TableField<UcMemberDegreeRecord, String> SPECIALTY = createField("specialty", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "专业");

    /**
     * The column <code>xbkj.uc_member_degree.photo</code>. 毕业照片
     */
    public final TableField<UcMemberDegreeRecord, String> PHOTO = createField("photo", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "毕业照片");

    /**
     * The column <code>xbkj.uc_member_degree.photo_style</code>. 毕业照片格式
     */
    public final TableField<UcMemberDegreeRecord, String> PHOTO_STYLE = createField("photo_style", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "毕业照片格式");

    /**
     * The column <code>xbkj.uc_member_degree.college</code>. 毕业院校
     */
    public final TableField<UcMemberDegreeRecord, String> COLLEGE = createField("college", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "毕业院校");

    /**
     * The column <code>xbkj.uc_member_degree.create_at</code>. 创建时间
     */
    public final TableField<UcMemberDegreeRecord, Timestamp> CREATE_AT = createField("create_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>xbkj.uc_member_degree.update_at</code>. 更新时间
     */
    public final TableField<UcMemberDegreeRecord, Timestamp> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * The column <code>xbkj.uc_member_degree.del_flag</code>. 删除标志
     */
    public final TableField<UcMemberDegreeRecord, Boolean> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "删除标志");

    /**
     * The column <code>xbkj.uc_member_degree.version</code>.
     */
    public final TableField<UcMemberDegreeRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>xbkj.uc_member_degree</code> table reference
     */
    public UcMemberDegree() {
        this(DSL.name("uc_member_degree"), null);
    }

    /**
     * Create an aliased <code>xbkj.uc_member_degree</code> table reference
     */
    public UcMemberDegree(String alias) {
        this(DSL.name(alias), UC_MEMBER_DEGREE);
    }

    /**
     * Create an aliased <code>xbkj.uc_member_degree</code> table reference
     */
    public UcMemberDegree(Name alias) {
        this(alias, UC_MEMBER_DEGREE);
    }

    private UcMemberDegree(Name alias, Table<UcMemberDegreeRecord> aliased) {
        this(alias, aliased, null);
    }

    private UcMemberDegree(Name alias, Table<UcMemberDegreeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "学历表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Xbkj.XBKJ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.UC_MEMBER_DEGREE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UcMemberDegreeRecord, Long> getIdentity() {
        return Keys.IDENTITY_UC_MEMBER_DEGREE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UcMemberDegreeRecord> getPrimaryKey() {
        return Keys.KEY_UC_MEMBER_DEGREE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UcMemberDegreeRecord>> getKeys() {
        return Arrays.<UniqueKey<UcMemberDegreeRecord>>asList(Keys.KEY_UC_MEMBER_DEGREE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UcMemberDegree as(String alias) {
        return new UcMemberDegree(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UcMemberDegree as(Name alias) {
        return new UcMemberDegree(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UcMemberDegree rename(String name) {
        return new UcMemberDegree(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UcMemberDegree rename(Name name) {
        return new UcMemberDegree(name, null);
    }
}
