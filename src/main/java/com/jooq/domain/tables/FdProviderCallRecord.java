/*
 * This file is generated by jOOQ.
*/
package com.jooq.domain.tables;


import com.jooq.domain.Indexes;
import com.jooq.domain.Keys;
import com.jooq.domain.Xbkj;
import com.jooq.domain.enums.FdProviderCallRecordStartMode;
import com.jooq.domain.tables.records.FdProviderCallRecordRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 通话记录表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FdProviderCallRecord extends TableImpl<FdProviderCallRecordRecord> {

    private static final long serialVersionUID = 1596327631;

    /**
     * The reference instance of <code>xbkj.fd_provider_call_record</code>
     */
    public static final FdProviderCallRecord FD_PROVIDER_CALL_RECORD = new FdProviderCallRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FdProviderCallRecordRecord> getRecordType() {
        return FdProviderCallRecordRecord.class;
    }

    /**
     * The column <code>xbkj.fd_provider_call_record.id</code>. 主键
     */
    public final TableField<FdProviderCallRecordRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>xbkj.fd_provider_call_record.account_id</code>. 账户id
     */
    public final TableField<FdProviderCallRecordRecord, Long> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "账户id");

    /**
     * The column <code>xbkj.fd_provider_call_record.phone</code>. 手机号
     */
    public final TableField<FdProviderCallRecordRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR(32), this, "手机号");

    /**
     * The column <code>xbkj.fd_provider_call_record.opposite</code>. 对方电话号码
     */
    public final TableField<FdProviderCallRecordRecord, String> OPPOSITE = createField("opposite", org.jooq.impl.SQLDataType.VARCHAR(32), this, "对方电话号码");

    /**
     * The column <code>xbkj.fd_provider_call_record.place</code>. 号码发生地
     */
    public final TableField<FdProviderCallRecordRecord, String> PLACE = createField("place", org.jooq.impl.SQLDataType.VARCHAR(128), this, "号码发生地");

    /**
     * The column <code>xbkj.fd_provider_call_record.nation</code>. 号码发生地国名
     */
    public final TableField<FdProviderCallRecordRecord, String> NATION = createField("nation", org.jooq.impl.SQLDataType.VARCHAR(16), this, "号码发生地国名");

    /**
     * The column <code>xbkj.fd_provider_call_record.province</code>. 号码发生地省份
     */
    public final TableField<FdProviderCallRecordRecord, String> PROVINCE = createField("province", org.jooq.impl.SQLDataType.VARCHAR(16), this, "号码发生地省份");

    /**
     * The column <code>xbkj.fd_provider_call_record.city</code>. 号码发生地城市
     */
    public final TableField<FdProviderCallRecordRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.VARCHAR(16), this, "号码发生地城市");

    /**
     * The column <code>xbkj.fd_provider_call_record.call_begin</code>. 通话开始时间
     */
    public final TableField<FdProviderCallRecordRecord, String> CALL_BEGIN = createField("call_begin", org.jooq.impl.SQLDataType.VARCHAR(20), this, "通话开始时间");

    /**
     * The column <code>xbkj.fd_provider_call_record.call_used</code>. 通话时长(单位：秒)
     */
    public final TableField<FdProviderCallRecordRecord, String> CALL_USED = createField("call_used", org.jooq.impl.SQLDataType.VARCHAR(20), this, "通话时长(单位：秒)");

    /**
     * The column <code>xbkj.fd_provider_call_record.actual_expenses</code>. 实收通信费(单位：分)
     */
    public final TableField<FdProviderCallRecordRecord, String> ACTUAL_EXPENSES = createField("actual_expenses", org.jooq.impl.SQLDataType.VARCHAR(20), this, "实收通信费(单位：分)");

    /**
     * The column <code>xbkj.fd_provider_call_record.charge_mode</code>. 通信类型(中文)
     */
    public final TableField<FdProviderCallRecordRecord, String> CHARGE_MODE = createField("charge_mode", org.jooq.impl.SQLDataType.VARCHAR(16), this, "通信类型(中文)");

    /**
     * The column <code>xbkj.fd_provider_call_record.start_mode</code>. 通话发起方式(中文，枚举)
     */
    public final TableField<FdProviderCallRecordRecord, FdProviderCallRecordStartMode> START_MODE = createField("start_mode", org.jooq.impl.SQLDataType.VARCHAR(4).asEnumDataType(com.jooq.domain.enums.FdProviderCallRecordStartMode.class), this, "通话发起方式(中文，枚举)");

    /**
     * The column <code>xbkj.fd_provider_call_record.create_at</code>. 创建时间
     */
    public final TableField<FdProviderCallRecordRecord, Timestamp> CREATE_AT = createField("create_at", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>xbkj.fd_provider_call_record.update_at</code>. 更新时间
     */
    public final TableField<FdProviderCallRecordRecord, Timestamp> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * The column <code>xbkj.fd_provider_call_record.del_flag</code>. 删除标志
     */
    public final TableField<FdProviderCallRecordRecord, Boolean> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "删除标志");

    /**
     * The column <code>xbkj.fd_provider_call_record.version</code>.
     */
    public final TableField<FdProviderCallRecordRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>xbkj.fd_provider_call_record</code> table reference
     */
    public FdProviderCallRecord() {
        this(DSL.name("fd_provider_call_record"), null);
    }

    /**
     * Create an aliased <code>xbkj.fd_provider_call_record</code> table reference
     */
    public FdProviderCallRecord(String alias) {
        this(DSL.name(alias), FD_PROVIDER_CALL_RECORD);
    }

    /**
     * Create an aliased <code>xbkj.fd_provider_call_record</code> table reference
     */
    public FdProviderCallRecord(Name alias) {
        this(alias, FD_PROVIDER_CALL_RECORD);
    }

    private FdProviderCallRecord(Name alias, Table<FdProviderCallRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private FdProviderCallRecord(Name alias, Table<FdProviderCallRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "通话记录表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Xbkj.XBKJ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FD_PROVIDER_CALL_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FdProviderCallRecordRecord, Long> getIdentity() {
        return Keys.IDENTITY_FD_PROVIDER_CALL_RECORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FdProviderCallRecordRecord> getPrimaryKey() {
        return Keys.KEY_FD_PROVIDER_CALL_RECORD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FdProviderCallRecordRecord>> getKeys() {
        return Arrays.<UniqueKey<FdProviderCallRecordRecord>>asList(Keys.KEY_FD_PROVIDER_CALL_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FdProviderCallRecord as(String alias) {
        return new FdProviderCallRecord(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FdProviderCallRecord as(Name alias) {
        return new FdProviderCallRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FdProviderCallRecord rename(String name) {
        return new FdProviderCallRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FdProviderCallRecord rename(Name name) {
        return new FdProviderCallRecord(name, null);
    }
}
