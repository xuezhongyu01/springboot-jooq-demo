/*
 * This file is generated by jOOQ.
*/
package com.jooq.domain.tables;


import com.jooq.domain.Indexes;
import com.jooq.domain.Keys;
import com.jooq.domain.Xbkj;
import com.jooq.domain.enums.UcMemberRegisterType;
import com.jooq.domain.enums.UcMemberSex;
import com.jooq.domain.enums.UcMemberStatus;
import com.jooq.domain.tables.records.UcMemberRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 会员表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UcMember extends TableImpl<UcMemberRecord> {

    private static final long serialVersionUID = -1996951818;

    /**
     * The reference instance of <code>xbkj.uc_member</code>
     */
    public static final UcMember UC_MEMBER = new UcMember();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UcMemberRecord> getRecordType() {
        return UcMemberRecord.class;
    }

    /**
     * The column <code>xbkj.uc_member.id</code>. user table
     */
    public final TableField<UcMemberRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "user table");

    /**
     * The column <code>xbkj.uc_member.nick_name</code>. 昵称
     */
    public final TableField<UcMemberRecord, String> NICK_NAME = createField("nick_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "昵称");

    /**
     * The column <code>xbkj.uc_member.username</code>. 用户名
     */
    public final TableField<UcMemberRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(255), this, "用户名");

    /**
     * The column <code>xbkj.uc_member.mobile</code>. 手机号
     */
    public final TableField<UcMemberRecord, Long> MOBILE = createField("mobile", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "手机号");

    /**
     * The column <code>xbkj.uc_member.status</code>. 未申请，申请中，待激活，激活中，已激活，提额激活中，已提额,注销,禁用
     */
    public final TableField<UcMemberRecord, UcMemberStatus> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(11).nullable(false).defaultValue(org.jooq.impl.DSL.inline("un_apply", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(com.jooq.domain.enums.UcMemberStatus.class), this, "未申请，申请中，待激活，激活中，已激活，提额激活中，已提额,注销,禁用");

    /**
     * The column <code>xbkj.uc_member.password</code>. 密码
     */
    public final TableField<UcMemberRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "密码");

    /**
     * The column <code>xbkj.uc_member.pay_password</code>. 支付密码
     */
    public final TableField<UcMemberRecord, String> PAY_PASSWORD = createField("pay_password", org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "支付密码");

    /**
     * The column <code>xbkj.uc_member.yeepay_id</code>.
     */
    public final TableField<UcMemberRecord, String> YEEPAY_ID = createField("yeepay_id", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>xbkj.uc_member.salt</code>. 密码加密salt
     */
    public final TableField<UcMemberRecord, String> SALT = createField("salt", org.jooq.impl.SQLDataType.VARCHAR(8).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "密码加密salt");

    /**
     * The column <code>xbkj.uc_member.sex</code>. -1:未知 0女: 1:男
     */
    public final TableField<UcMemberRecord, UcMemberSex> SEX = createField("sex", org.jooq.impl.SQLDataType.VARCHAR(6).defaultValue(org.jooq.impl.DSL.inline("unknow", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(com.jooq.domain.enums.UcMemberSex.class), this, "-1:未知 0女: 1:男");

    /**
     * The column <code>xbkj.uc_member.true_name</code>. 真实姓名
     */
    public final TableField<UcMemberRecord, String> TRUE_NAME = createField("true_name", org.jooq.impl.SQLDataType.VARCHAR(50), this, "真实姓名");

    /**
     * The column <code>xbkj.uc_member.identity_number</code>. 身份证号码
     */
    public final TableField<UcMemberRecord, String> IDENTITY_NUMBER = createField("identity_number", org.jooq.impl.SQLDataType.VARCHAR(20), this, "身份证号码");

    /**
     * The column <code>xbkj.uc_member.fingerprint</code>. 设备指纹
     */
    public final TableField<UcMemberRecord, String> FINGERPRINT = createField("fingerprint", org.jooq.impl.SQLDataType.VARCHAR(255), this, "设备指纹");

    /**
     * The column <code>xbkj.uc_member.short_url</code>. 推荐码
     */
    public final TableField<UcMemberRecord, String> SHORT_URL = createField("short_url", org.jooq.impl.SQLDataType.VARCHAR(32), this, "推荐码");

    /**
     * The column <code>xbkj.uc_member.avatars</code>. 个人头像url
     */
    public final TableField<UcMemberRecord, String> AVATARS = createField("avatars", org.jooq.impl.SQLDataType.VARCHAR(255), this, "个人头像url");

    /**
     * The column <code>xbkj.uc_member.score</code>. 评分
     */
    public final TableField<UcMemberRecord, Double> SCORE = createField("score", org.jooq.impl.SQLDataType.DOUBLE.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DOUBLE)), this, "评分");

    /**
     * The column <code>xbkj.uc_member.register_type</code>.
     */
    public final TableField<UcMemberRecord, UcMemberRegisterType> REGISTER_TYPE = createField("register_type", org.jooq.impl.SQLDataType.VARCHAR(7).nullable(false).defaultValue(org.jooq.impl.DSL.inline("web", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(com.jooq.domain.enums.UcMemberRegisterType.class), this, "");

    /**
     * The column <code>xbkj.uc_member.register_trace_source</code>. 注册来源码
     */
    public final TableField<UcMemberRecord, String> REGISTER_TRACE_SOURCE = createField("register_trace_source", org.jooq.impl.SQLDataType.VARCHAR(255), this, "注册来源码");

    /**
     * The column <code>xbkj.uc_member.register_trace_no</code>. 注册来源码编号
     */
    public final TableField<UcMemberRecord, String> REGISTER_TRACE_NO = createField("register_trace_no", org.jooq.impl.SQLDataType.VARCHAR(255), this, "注册来源码编号");

    /**
     * The column <code>xbkj.uc_member.register_time</code>. 注册时间
     */
    public final TableField<UcMemberRecord, Timestamp> REGISTER_TIME = createField("register_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "注册时间");

    /**
     * The column <code>xbkj.uc_member.create_at</code>. 创建时间
     */
    public final TableField<UcMemberRecord, Timestamp> CREATE_AT = createField("create_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>xbkj.uc_member.update_at</code>. 更新时间
     */
    public final TableField<UcMemberRecord, Timestamp> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * The column <code>xbkj.uc_member.del_flag</code>. 删除标志
     */
    public final TableField<UcMemberRecord, Boolean> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "删除标志");

    /**
     * The column <code>xbkj.uc_member.version</code>.
     */
    public final TableField<UcMemberRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>xbkj.uc_member.stage_flag</code>. 是否分期用户
     */
    public final TableField<UcMemberRecord, Boolean> STAGE_FLAG = createField("stage_flag", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "是否分期用户");

    /**
     * Create a <code>xbkj.uc_member</code> table reference
     */
    public UcMember() {
        this(DSL.name("uc_member"), null);
    }

    /**
     * Create an aliased <code>xbkj.uc_member</code> table reference
     */
    public UcMember(String alias) {
        this(DSL.name(alias), UC_MEMBER);
    }

    /**
     * Create an aliased <code>xbkj.uc_member</code> table reference
     */
    public UcMember(Name alias) {
        this(alias, UC_MEMBER);
    }

    private UcMember(Name alias, Table<UcMemberRecord> aliased) {
        this(alias, aliased, null);
    }

    private UcMember(Name alias, Table<UcMemberRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "会员表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Xbkj.XBKJ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.UC_MEMBER_INDEX_IDENTITY_NUMBER, Indexes.UC_MEMBER_INDEX_SHORT_URL, Indexes.UC_MEMBER_PRIMARY, Indexes.UC_MEMBER_UNIQUE_MEMBER_MOBILE, Indexes.UC_MEMBER_UNIQUE_MEMBER_USERNAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UcMemberRecord, Long> getIdentity() {
        return Keys.IDENTITY_UC_MEMBER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UcMemberRecord> getPrimaryKey() {
        return Keys.KEY_UC_MEMBER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UcMemberRecord>> getKeys() {
        return Arrays.<UniqueKey<UcMemberRecord>>asList(Keys.KEY_UC_MEMBER_PRIMARY, Keys.KEY_UC_MEMBER_UNIQUE_MEMBER_USERNAME, Keys.KEY_UC_MEMBER_UNIQUE_MEMBER_MOBILE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UcMember as(String alias) {
        return new UcMember(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UcMember as(Name alias) {
        return new UcMember(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UcMember rename(String name) {
        return new UcMember(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UcMember rename(Name name) {
        return new UcMember(name, null);
    }
}
