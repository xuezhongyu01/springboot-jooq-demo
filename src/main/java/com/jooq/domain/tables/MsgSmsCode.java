/*
 * This file is generated by jOOQ.
*/
package com.jooq.domain.tables;


import com.jooq.domain.Indexes;
import com.jooq.domain.Keys;
import com.jooq.domain.Xbkj;
import com.jooq.domain.enums.MsgSmsCodeStatus;
import com.jooq.domain.tables.records.MsgSmsCodeRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 短信记录表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MsgSmsCode extends TableImpl<MsgSmsCodeRecord> {

    private static final long serialVersionUID = -500445550;

    /**
     * The reference instance of <code>xbkj.msg_sms_code</code>
     */
    public static final MsgSmsCode MSG_SMS_CODE = new MsgSmsCode();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MsgSmsCodeRecord> getRecordType() {
        return MsgSmsCodeRecord.class;
    }

    /**
     * The column <code>xbkj.msg_sms_code.id</code>.
     */
    public final TableField<MsgSmsCodeRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>xbkj.msg_sms_code.mobile</code>. 手机号码
     */
    public final TableField<MsgSmsCodeRecord, Long> MOBILE = createField("mobile", org.jooq.impl.SQLDataType.BIGINT, this, "手机号码");

    /**
     * The column <code>xbkj.msg_sms_code.msg_message_template_id</code>. 模版ID
     */
    public final TableField<MsgSmsCodeRecord, Long> MSG_MESSAGE_TEMPLATE_ID = createField("msg_message_template_id", org.jooq.impl.SQLDataType.BIGINT, this, "模版ID");

    /**
     * The column <code>xbkj.msg_sms_code.receive_time</code>. 接收时间
     */
    public final TableField<MsgSmsCodeRecord, Timestamp> RECEIVE_TIME = createField("receive_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "接收时间");

    /**
     * The column <code>xbkj.msg_sms_code.content</code>. 短信内容
     */
    public final TableField<MsgSmsCodeRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB, this, "短信内容");

    /**
     * The column <code>xbkj.msg_sms_code.status</code>. 状态：发送中、发送成功、发送失败
     */
    public final TableField<MsgSmsCodeRecord, MsgSmsCodeStatus> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(10).asEnumDataType(com.jooq.domain.enums.MsgSmsCodeStatus.class), this, "状态：发送中、发送成功、发送失败");

    /**
     * The column <code>xbkj.msg_sms_code.channel</code>. 渠道
     */
    public final TableField<MsgSmsCodeRecord, String> CHANNEL = createField("channel", org.jooq.impl.SQLDataType.VARCHAR(20), this, "渠道");

    /**
     * The column <code>xbkj.msg_sms_code.create_at</code>.
     */
    public final TableField<MsgSmsCodeRecord, Timestamp> CREATE_AT = createField("create_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>xbkj.msg_sms_code.update_at</code>.
     */
    public final TableField<MsgSmsCodeRecord, Timestamp> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>xbkj.msg_sms_code.del_flag</code>.
     */
    public final TableField<MsgSmsCodeRecord, Boolean> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.BIT, this, "");

    /**
     * The column <code>xbkj.msg_sms_code.version</code>.
     */
    public final TableField<MsgSmsCodeRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>xbkj.msg_sms_code</code> table reference
     */
    public MsgSmsCode() {
        this(DSL.name("msg_sms_code"), null);
    }

    /**
     * Create an aliased <code>xbkj.msg_sms_code</code> table reference
     */
    public MsgSmsCode(String alias) {
        this(DSL.name(alias), MSG_SMS_CODE);
    }

    /**
     * Create an aliased <code>xbkj.msg_sms_code</code> table reference
     */
    public MsgSmsCode(Name alias) {
        this(alias, MSG_SMS_CODE);
    }

    private MsgSmsCode(Name alias, Table<MsgSmsCodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private MsgSmsCode(Name alias, Table<MsgSmsCodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "短信记录表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Xbkj.XBKJ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MSG_SMS_CODE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MsgSmsCodeRecord, Long> getIdentity() {
        return Keys.IDENTITY_MSG_SMS_CODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MsgSmsCodeRecord> getPrimaryKey() {
        return Keys.KEY_MSG_SMS_CODE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MsgSmsCodeRecord>> getKeys() {
        return Arrays.<UniqueKey<MsgSmsCodeRecord>>asList(Keys.KEY_MSG_SMS_CODE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MsgSmsCode as(String alias) {
        return new MsgSmsCode(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MsgSmsCode as(Name alias) {
        return new MsgSmsCode(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MsgSmsCode rename(String name) {
        return new MsgSmsCode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MsgSmsCode rename(Name name) {
        return new MsgSmsCode(name, null);
    }
}
