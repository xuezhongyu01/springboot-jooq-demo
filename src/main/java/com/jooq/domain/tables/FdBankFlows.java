/*
 * This file is generated by jOOQ.
*/
package com.jooq.domain.tables;


import com.jooq.domain.Indexes;
import com.jooq.domain.Keys;
import com.jooq.domain.Xbkj;
import com.jooq.domain.tables.records.FdBankFlowsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 流水(数组)
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FdBankFlows extends TableImpl<FdBankFlowsRecord> {

    private static final long serialVersionUID = 10335282;

    /**
     * The reference instance of <code>xbkj.fd_bank_flows</code>
     */
    public static final FdBankFlows FD_BANK_FLOWS = new FdBankFlows();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FdBankFlowsRecord> getRecordType() {
        return FdBankFlowsRecord.class;
    }

    /**
     * The column <code>xbkj.fd_bank_flows.id</code>. 主键
     */
    public final TableField<FdBankFlowsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>xbkj.fd_bank_flows.account_id</code>. 账户ID(关联字段)
     */
    public final TableField<FdBankFlowsRecord, Long> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.BIGINT, this, "账户ID(关联字段)");

    /**
     * The column <code>xbkj.fd_bank_flows.bill_id</code>. 账单ID(信用卡特有)
     */
    public final TableField<FdBankFlowsRecord, String> BILL_ID = createField("bill_id", org.jooq.impl.SQLDataType.VARCHAR(32), this, "账单ID(信用卡特有)");

    /**
     * The column <code>xbkj.fd_bank_flows.trade_time</code>. 交易时间
     */
    public final TableField<FdBankFlowsRecord, String> TRADE_TIME = createField("trade_time", org.jooq.impl.SQLDataType.VARCHAR(64), this, "交易时间");

    /**
     * The column <code>xbkj.fd_bank_flows.settle_time</code>. 入账时间
     */
    public final TableField<FdBankFlowsRecord, String> SETTLE_TIME = createField("settle_time", org.jooq.impl.SQLDataType.VARCHAR(64), this, "入账时间");

    /**
     * The column <code>xbkj.fd_bank_flows.trade_amount</code>. 交易金额(单位：分, &gt;0为流出, &lt;0为流入)
     */
    public final TableField<FdBankFlowsRecord, String> TRADE_AMOUNT = createField("trade_amount", org.jooq.impl.SQLDataType.VARCHAR(32), this, "交易金额(单位：分, >0为流出, <0为流入)");

    /**
     * The column <code>xbkj.fd_bank_flows.settle_amount</code>. 入账金额(单位：分, &gt;0为流出, &lt;0为流入)
     */
    public final TableField<FdBankFlowsRecord, String> SETTLE_AMOUNT = createField("settle_amount", org.jooq.impl.SQLDataType.VARCHAR(32), this, "入账金额(单位：分, >0为流出, <0为流入)");

    /**
     * The column <code>xbkj.fd_bank_flows.trade_currency</code>. 交易币种(参见币种字典)
     */
    public final TableField<FdBankFlowsRecord, String> TRADE_CURRENCY = createField("trade_currency", org.jooq.impl.SQLDataType.VARCHAR(32), this, "交易币种(参见币种字典)");

    /**
     * The column <code>xbkj.fd_bank_flows.settle_currency</code>. 入账币种(参见币种字典)
     */
    public final TableField<FdBankFlowsRecord, String> SETTLE_CURRENCY = createField("settle_currency", org.jooq.impl.SQLDataType.VARCHAR(32), this, "入账币种(参见币种字典)");

    /**
     * The column <code>xbkj.fd_bank_flows.balance</code>.  余额(单位：分)
     */
    public final TableField<FdBankFlowsRecord, String> BALANCE = createField("balance", org.jooq.impl.SQLDataType.VARCHAR(32), this, " 余额(单位：分)");

    /**
     * The column <code>xbkj.fd_bank_flows.account_no</code>. 交易账户卡号
     */
    public final TableField<FdBankFlowsRecord, String> ACCOUNT_NO = createField("account_no", org.jooq.impl.SQLDataType.VARCHAR(32), this, "交易账户卡号");

    /**
     * The column <code>xbkj.fd_bank_flows.trade_description</code>. 交易描述
     */
    public final TableField<FdBankFlowsRecord, String> TRADE_DESCRIPTION = createField("trade_description", org.jooq.impl.SQLDataType.VARCHAR(128), this, "交易描述");

    /**
     * The column <code>xbkj.fd_bank_flows.trade_nation</code>. 交易国家
     */
    public final TableField<FdBankFlowsRecord, String> TRADE_NATION = createField("trade_nation", org.jooq.impl.SQLDataType.VARCHAR(128), this, "交易国家");

    /**
     * The column <code>xbkj.fd_bank_flows.trade_place</code>. 交易地点
     */
    public final TableField<FdBankFlowsRecord, String> TRADE_PLACE = createField("trade_place", org.jooq.impl.SQLDataType.VARCHAR(128), this, "交易地点");

    /**
     * The column <code>xbkj.fd_bank_flows.trade_channel</code>. 交易渠道
     */
    public final TableField<FdBankFlowsRecord, String> TRADE_CHANNEL = createField("trade_channel", org.jooq.impl.SQLDataType.VARCHAR(128), this, "交易渠道");

    /**
     * The column <code>xbkj.fd_bank_flows.oppesite_name</code>. 对方账户名
     */
    public final TableField<FdBankFlowsRecord, String> OPPESITE_NAME = createField("oppesite_name", org.jooq.impl.SQLDataType.VARCHAR(128), this, "对方账户名");

    /**
     * The column <code>xbkj.fd_bank_flows.oppesite_bank</code>. 对方开户行
     */
    public final TableField<FdBankFlowsRecord, String> OPPESITE_BANK = createField("oppesite_bank", org.jooq.impl.SQLDataType.VARCHAR(128), this, "对方开户行");

    /**
     * The column <code>xbkj.fd_bank_flows.oppesite_account</code>. 对方账号
     */
    public final TableField<FdBankFlowsRecord, String> OPPESITE_ACCOUNT = createField("oppesite_account", org.jooq.impl.SQLDataType.VARCHAR(128), this, "对方账号");

    /**
     * The column <code>xbkj.fd_bank_flows.summary</code>. 摘要
     */
    public final TableField<FdBankFlowsRecord, String> SUMMARY = createField("summary", org.jooq.impl.SQLDataType.VARCHAR(128), this, "摘要");

    /**
     * The column <code>xbkj.fd_bank_flows.postscript</code>. 附言
     */
    public final TableField<FdBankFlowsRecord, String> POSTSCRIPT = createField("postscript", org.jooq.impl.SQLDataType.VARCHAR(128), this, "附言");

    /**
     * The column <code>xbkj.fd_bank_flows.cash_remit</code>. 现钞/现汇
     */
    public final TableField<FdBankFlowsRecord, String> CASH_REMIT = createField("cash_remit", org.jooq.impl.SQLDataType.VARCHAR(32), this, "现钞/现汇");

    /**
     * The column <code>xbkj.fd_bank_flows.create_at</code>. 创建时间
     */
    public final TableField<FdBankFlowsRecord, Timestamp> CREATE_AT = createField("create_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>xbkj.fd_bank_flows.update_at</code>. 更新时间
     */
    public final TableField<FdBankFlowsRecord, Timestamp> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * The column <code>xbkj.fd_bank_flows.del_flag</code>. 删除标志
     */
    public final TableField<FdBankFlowsRecord, Boolean> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "删除标志");

    /**
     * The column <code>xbkj.fd_bank_flows.version</code>.
     */
    public final TableField<FdBankFlowsRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>xbkj.fd_bank_flows</code> table reference
     */
    public FdBankFlows() {
        this(DSL.name("fd_bank_flows"), null);
    }

    /**
     * Create an aliased <code>xbkj.fd_bank_flows</code> table reference
     */
    public FdBankFlows(String alias) {
        this(DSL.name(alias), FD_BANK_FLOWS);
    }

    /**
     * Create an aliased <code>xbkj.fd_bank_flows</code> table reference
     */
    public FdBankFlows(Name alias) {
        this(alias, FD_BANK_FLOWS);
    }

    private FdBankFlows(Name alias, Table<FdBankFlowsRecord> aliased) {
        this(alias, aliased, null);
    }

    private FdBankFlows(Name alias, Table<FdBankFlowsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "流水(数组)");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Xbkj.XBKJ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FD_BANK_FLOWS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FdBankFlowsRecord, Long> getIdentity() {
        return Keys.IDENTITY_FD_BANK_FLOWS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FdBankFlowsRecord> getPrimaryKey() {
        return Keys.KEY_FD_BANK_FLOWS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FdBankFlowsRecord>> getKeys() {
        return Arrays.<UniqueKey<FdBankFlowsRecord>>asList(Keys.KEY_FD_BANK_FLOWS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FdBankFlows as(String alias) {
        return new FdBankFlows(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FdBankFlows as(Name alias) {
        return new FdBankFlows(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FdBankFlows rename(String name) {
        return new FdBankFlows(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FdBankFlows rename(Name name) {
        return new FdBankFlows(name, null);
    }
}
